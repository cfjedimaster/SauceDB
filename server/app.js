var express 	= require('express'),
	app     	= express(),
	favicon 	= require('serve-favicon'),
	ibmbluemix 	= require('ibmbluemix'),
	https		= require('https'),
	config  	= {
		// change to real application route assigned for your application
		applicationRoute : 'saucedb.mybluemix.net',
		// change to real application ID generated by Bluemix for your application
		applicationId : '38a0a550-b018-4a10-b879-aec68868c249'
	};

var credentials = require('./credentials');

app.use(favicon(__dirname + '/public/favicon.ico'));

var cloudant = require('cloudant')(credentials.cloudant_access_url);
var db = cloudant.use("sauces");

// init core sdk
ibmbluemix.initialize(config);
var logger = ibmbluemix.getLogger();

app.use(require('cookie-parser')("my cookies bring everyone to the yard"));
app.use(require('express-session')());

//redirect to cloudcode doc page when accessing the root context
app.get('/', function(req, res){
	res.sendFile(__dirname + '/public/index.html');
});

// init service sdks 
app.use(function(req, res, next) {
    req.logger = logger;
    next();
});

// init basics for an express app
app.use(require('./lib/setup'));

app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, IBM-APPLICATION-ID, IBM-DEVICE-MODEL, IBM-DEVICE-TYPE, IBM-DEVICE-ID, IBM-REQUEST-CORRELATION-ID, IBM-DEVICE-PLATFORM-VERSION, IBM-APPLICATION-SECRET, IBM-DEVICE-NAME");
  next();
});

  
var ibmconfig = ibmbluemix.getConfig();
console.log(ibmconfig.getContextRoot());
app.get(ibmconfig.getContextRoot()+'/feed',  function(req, res) {
	console.log('Requesting feed');

	db.view("Reviews", "reviews", {descending:true}, function(err, body) {
		if(err) console.log('err '+err);
		else {
			var result = [];
			body.rows.forEach(function(doc) {
				//console.log(doc);
				var item = doc.value;
				item.id = doc.id;
				result.push(item);
			});
			res.setHeader('Content-Type', 'application/json');
			res.json(result);
		}
		
	});
});

app.get(ibmconfig.getContextRoot()+'/sauce/:id',  function(req, res) {
	console.log('Requesting sauce '+req.params.id);

	db.get(req.params.id, function(err, body) {
		console.dir(body);
		//TODO: Handle a bad id
		var result = {};
		//for now, just copy it
		result = body;
		res.setHeader('Content-Type', 'application/json');
		res.json(result);		
	});
});

app.get(ibmconfig.getContextRoot()+'/search/:term', function(req, res) {
	console.log("searching for "+req.params.term);
	//we need to manipulate term a bit
	var term = "name:" + req.params.term;
	term += "*";
	console.log(term);
	db.search('SauceName','SauceName', {q:term}, function(err, results) {
		if(err) throw er;
		var result = [];
		for(var i=0;i<results.rows.length;i++) {
			//console.dir(results.rows[i]);
			result.push({id:results.rows[i].id, name:results.rows[i].fields.name});	
		}
		console.dir(result);
		res.setHeader('Content-Type', 'application/json');
		res.json(result);		
	});
});

/*
used to auth calls
*/
function secure(req, result, next) {    
    if(req.session.tokenchecked) {
        next();   
    } else {
		console.log('need to check token ');
		var token = req.body.token;
		//check to ensure token is good
		https.get('https://graph.facebook.com/me?fields=email,name,picture&access_token='+token, function(res) {
			var str = '';
			res.on('data', function(chunk) {
				str += chunk;
			})
			res.on('end', function() {
				var response = JSON.parse(str);
				//store name and image
				req.session.name = response.name;
				req.session.img = response.picture.data.url;
				console.dir(response);
				if(response.id) {
					console.log('good');
					req.session.tokenchecked = 1;
					next();
				} else {
					console.log('bad');
					result.send("0");
				}
			})
		}).end();
	
    }
}

app.post(ibmconfig.getContextRoot()+'/addreview', secure, function(req, res) {
	console.log("adding review "+JSON.stringify(req.body));
	
	//First, validate token
	//Then validate data

	var newReview = {
		posted:new Date(),
		rating:req.body.rating,
		text:req.body.text,
			user:{
				name:req.session.name,
				img:req.session.img
			}
	};
	console.log("New Review:", JSON.stringify(newReview));

	//Then post to db
	//So first q, is this a new sauce?
	
	if(!req.body.sauce.id) {
		console.log('i need to make a new sauce');
		
		db.insert({
			name:req.body.sauce.name,
			company:req.body.sauce.company,
			avgrating:newReview.rating,
			reviews:[newReview]		
		}, function(err, body) {
			if(err) throw err;
			res.setHeader('Content-Type', 'application/json');
			res.json(body.id);		
		});	
	} else {
		//not new, so get, then add	
		db.get(req.body.sauce.id, function(err, body) {
			if(err) throw err;
			body.reviews.push(newReview);

			//calculate avgrate
			var totalRating = 0;
			for(var i=0;i<body.reviews.length;i++) {
				totalRating += parseInt(body.reviews[i].rating,10);	
			}
			body.avgrating = totalRating/body.reviews.length;
			db.insert(body, function(err, body) {
				if(err) throw err;
				res.setHeader('Content-Type', 'application/json');
				res.json(body.id);		
			});	
					
		});	
	}
});

app.use(ibmconfig.getContextRoot(), require('./lib/staticfile'));

// Want to see how you can easily extend this template to work with third party node modules?
// If so, add the Twilio service to your Mobile Cloud application and uncomment this next line.
// app.use(ibmconfig.getContextRoot(), require('./lib/mytwilio')(ibmbluemix));

app.listen(ibmconfig.getPort());
logger.info('Server started at port: '+ibmconfig.getPort());
